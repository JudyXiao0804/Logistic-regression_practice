import numpy as np
from matplotlib import pyplot as plt

test = np.loadtxt('01.csv',delimiter=',',skiprows=1)

train_x = test[:,0:2]

train_y = test[:,2]


theta = np.random.rand(3)

mu = train_x.mean()

sigma = train_x.std()
def standardize(x):
    return (x - mu) / sigma


train_x = standardize(train_x)


def add_x0(x):
    #標本データの行数分、要素１の行データを生成する
    x0 = np.ones([x.shape[0],1])
    #生成した行データを、標本データの直前に置いて結合する
    return np.hstack([x0,x])


X = add_x0(train_x)


#識別関数としてのシグモイド関数を実装
def f(x):
    #θ群と変数群をそれぞれベクトルと見なし乗算を行なっている
    return 1 / (1 + np.exp(-np.dot(x, theta)))

ETA = 1e-3

#指定回数パラメータの更新を行う更新式を実装
def update_theta():
    new_theta = theta + ETA * np.dot(train_y - f(X), X)
    return new_theta

#更新回数の指定
epoch = 5000


print('更新前のパラメータθ')
print(theta)

#パラメータ更新の実行
for _ in range(epoch):
    theta = update_theta()

print('更新後のパラメータθ')
print(theta)


#標本データの可視化
##正解値が１のデータを'o'で可視化
plt.plot(train_x[train_y==1, 0],train_x[train_y==1,1],'o')
##正解値が０のデータを'x'で可視化
plt.plot(train_x[train_y==0, 0],train_x[train_y==0,1],'x')


#描画するグラフのx軸の長さ
xline = np.linspace(-2,2,100)

#決定境界を可視化する関数を実装
def validator(theta):
    #(x,y)におけるy軸。
    #シグモイド関数では θTxa=0 が分類AとBの境界だったので、その時の値を求めてプロットする。
    #θTx = θ0x0 + θ1x1 + θ2x2 = 0
    #x2  = -(θ0 + θ1x1) / θ2
    y = -(theta[0] + theta[1] * xline) / theta[2]

    return y

#決定境界の可視化
#plt.plot(x0, -(theta[0] + theta[1] * xline) / theta[2], linestyle='solid')
plt.plot(xline, validator(theta), linestyle='solid', label='boudary')
plt.legend(loc='lower right')
plt.show()

print('算出された決定境界の式')
print('y = {:0.3f} + {:0.3f} * x1 + {:0.3f} * x2'.format(theta[0], theta[1], theta[2]))

# 分類確率の可視化
plt.plot(np.reshape(np.arange(X.shape[0]),16,1), np.sort(f(X))[::-1])
plt.ylabel('probability')
plt.xlabel('number')
plt.show()
